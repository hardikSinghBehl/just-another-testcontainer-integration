package com.behl.receptacle.service;

import java.util.List;
import java.util.UUID;
import org.hibernate.Hibernate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.behl.receptacle.entity.Country;
import com.behl.receptacle.entity.User;
import com.behl.receptacle.repository.CountryRepository;
import com.behl.receptacle.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class PersistenceService {

    private final CountryRepository countryRepository;
    private final UserRepository userRepository;
    
    /**
     * Retrieves the list of all coutry records saved in the datasource.
     *
     * Note: The country records are added during the application startup through Flyway migration
     * scripts. These records can only be read through the microservice and are not intended to be
     * modified externally.
     *
     * @return A list of {@link Country} objects saved in the datasource.
     */
    public List<Country> getAllCountries() {
        log.info("Fetching list of all countries");
        final var countries = countryRepository.findAll();
        log.info("Successfully fetched {} country records from the datasource", countries.size());
        return countries;
    }

    /**
     * Saves a user record in the datasource. The ID of the user is generated by the system and
     * cannot be externally specified.
     *
     * @param user The {@link User} object to be saved.
     * @return The unique ID of the saved user.
     * @throws IllegalArgumentException if the {@link User} parameter is {@code null}.
     */
    public UUID saveUser(@NonNull final User user) {
        final var savedUser = userRepository.save(user);
        log.info("User record with ID '{}' saved successfully", savedUser.getId());
        return savedUser.getId();
    }

    /**
     * Retrieves a user record from the datasource corresponding to the provided user ID.
     *
     * @param userId The unique ID of the user to be fetched.
     * @return The {@link User} object corresponding to the provided user ID.
     * @throws IllegalArgumentException if the {@code userId} parameter is {@code null}.
     * @throws EntityNotFoundException if no user record is found in the datasource corresponding to
     *         the provided user ID
     */
    @Transactional(readOnly = true)
    public User getUserById(@NonNull final UUID userId) {
        log.info("Fetching user by ID '{}'", userId);
        final var user = userRepository.getReferenceById(userId);
        Hibernate.initialize(user.getCountry());
        log.info("User record with ID '{}' fetched successfully", userId);
        return user;
    }

    /**
     * Deletes a user record from the datasource corresponding to the provided user ID.
     *
     * @param userId The unique ID of the user to be deleted.
     * @throws IllegalArgumentException if the {@code userId} parameter is {@code null}.
     */
    public void deleteUser(@NonNull final UUID userId) {
        log.info("Deleting user by ID '{}'", userId);
        userRepository.deleteById(userId);
        log.info("User record with ID '{}' deleted successfully", userId);
    }

}